model: gpt-3.5-turbo
max_tokens: 1000
messages:
  - role: system
    content: |
      Here is an openapi description of the jira api:
      {
          "components": {
              "schemas": {
                  "JsonTypeBean": {
                      "required": [
                          "type"
                      ],
                      "type": "object",
                      "properties": {
                          "configuration": {
                              "type": "object",
                              "additionalProperties": {
                                  "readOnly": true
                              },
                              "description": "If the field is a custom field, the configuration of the field.",
                              "readOnly": true
                          },
                          "custom": {
                              "type": "string",
                              "description": "If the field is a custom field, the URI of the field.",
                              "readOnly": true
                          },
                          "customId": {
                              "type": "integer",
                              "description": "If the field is a custom field, the custom ID of the field.",
                              "format": "int64",
                              "readOnly": true
                          },
                          "items": {
                              "type": "string",
                              "description": "When the data type is an array, the name of the field items within the array.",
                              "readOnly": true
                          },
                          "system": {
                              "type": "string",
                              "description": "If the field is a system field, the name of the field.",
                              "readOnly": true
                          },
                          "type": {
                              "type": "string",
                              "description": "The data type of the field.",
                              "readOnly": true
                          }
                      },
                      "description": "The schema of a field."
                  },
                  "IssueBean": {
                      "description": "Details about an issue.",
                      "properties": {
                          "editmeta": {
                              "allOf": [
                                  {
                                      "$ref": "#/components/schemas/IssueUpdateMetadata"
                                  }
                              ],
                              "description": "The metadata for the fields on the issue that can be amended.",
                              "readOnly": true
                          },
                          "expand": {
                              "description": "Expand options that include additional issue details in the response.",
                              "readOnly": true,
                              "type": "string",
                              "xml": {
                                  "attribute": true
                              }
                          },
                          "fields": {
                              "additionalProperties": {},
                              "type": "object"
                          },
                          "id": {
                              "description": "The ID of the issue.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "key": {
                              "description": "The key of the issue.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "names": {
                              "additionalProperties": {
                                  "readOnly": true,
                                  "type": "string"
                              },
                              "description": "The ID and name of each field present on the issue.",
                              "readOnly": true,
                              "type": "object"
                          },
                          "operations": {
                              "allOf": [
                                  {
                                      "$ref": "#/components/schemas/Operations"
                                  }
                              ],
                              "description": "The operations that can be performed on the issue.",
                              "readOnly": true
                          },
                          "properties": {
                              "additionalProperties": {
                                  "readOnly": true
                              },
                              "description": "Details of the issue properties identified in the request.",
                              "readOnly": true,
                              "type": "object"
                          },
                          "renderedFields": {
                              "additionalProperties": {
                                  "readOnly": true
                              },
                              "description": "The rendered value of each field present on the issue.",
                              "readOnly": true,
                              "type": "object"
                          },
                          "schema": {
                              "additionalProperties": {
                                  "$ref": "#/components/schemas/JsonTypeBean"
                              },
                              "description": "The schema describing each field present on the issue.",
                              "readOnly": true,
                              "type": "object"
                          },
                          "self": {
                              "description": "The URL of the issue details.",
                              "format": "uri",
                              "readOnly": true,
                              "type": "string"
                          },
                          "transitions": {
                              "description": "The transitions that can be performed on the issue.",
                              "items": {
                                  "$ref": "#/components/schemas/IssueTransition"
                              },
                              "readOnly": true,
                              "type": "array"
                          },
                          "versionedRepresentations": {
                              "additionalProperties": {
                                  "additionalProperties": {
                                      "readOnly": true
                                  },
                                  "readOnly": true,
                                  "type": "object"
                              },
                              "description": "The versions of each field on the issue.",
                              "readOnly": true,
                              "type": "object"
                          }
                      },
                      "type": "object",
                      "xml": {
                          "name": "issue"
                      }
                  },
                  "IssueTransition": {
                      "additionalProperties": true,
                      "description": "Details of an issue transition.",
                      "properties": {
                          "expand": {
                              "description": "Expand options that include additional transition details in the response.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "fields": {
                              "description": "Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.",
                              "readOnly": true,
                              "type": "object"
                          },
                          "hasScreen": {
                              "description": "Whether there is a screen associated with the issue transition.",
                              "readOnly": true,
                              "type": "boolean"
                          },
                          "id": {
                              "description": "The ID of the issue transition. Required when specifying a transition to undertake.",
                              "type": "string"
                          },
                          "isAvailable": {
                              "description": "Whether the transition is available to be performed.",
                              "readOnly": true,
                              "type": "boolean"
                          },
                          "isConditional": {
                              "description": "Whether the issue has to meet criteria before the issue transition is applied.",
                              "readOnly": true,
                              "type": "boolean"
                          },
                          "isGlobal": {
                              "description": "Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.",
                              "readOnly": true,
                              "type": "boolean"
                          },
                          "isInitial": {
                              "description": "Whether this is the initial issue transition for the workflow.",
                              "readOnly": true,
                              "type": "boolean"
                          },
                          "looped": {
                              "type": "boolean"
                          },
                          "name": {
                              "description": "The name of the issue transition.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "to": {
                              "allOf": [
                                  {
                                      "$ref": "#/components/schemas/StatusDetails"
                                  }
                              ],
                              "description": "Details of the issue status after the transition.",
                              "readOnly": true
                          }
                      },
                      "type": "object"
                  },
                  "IssueUpdateMetadata": {
                      "description": "A list of editable field details.",
                      "properties": {
                          "fields": {
                              "description": "A list of editable field details.",
                              "readOnly": true,
                              "type": "object"
                          }
                      },
                      "type": "object"
                  },
                  "LinkGroup": {
                      "description": "Details a link group, which defines issue operations.",
                      "properties": {
                          "groups": {
                              "items": {
                                  "$ref": "#/components/schemas/LinkGroup"
                              },
                              "type": "array"
                          },
                          "header": {
                              "$ref": "#/components/schemas/SimpleLink"
                          },
                          "id": {
                              "type": "string"
                          },
                          "links": {
                              "items": {
                                  "$ref": "#/components/schemas/SimpleLink"
                              },
                              "type": "array"
                          },
                          "styleClass": {
                              "type": "string"
                          },
                          "weight": {
                              "format": "int32",
                              "type": "integer"
                          }
                      },
                      "type": "object"
                  },
                  "Operations": {
                      "additionalProperties": true,
                      "description": "Details of the operations that can be performed on the issue.",
                      "properties": {
                          "linkGroups": {
                              "description": "Details of the link groups defining issue operations.",
                              "items": {
                                  "$ref": "#/components/schemas/LinkGroup"
                              },
                              "readOnly": true,
                              "type": "array"
                          }
                      },
                      "type": "object"
                  },
                  "SearchResults": {
                      "description": "The result of a JQL search.",
                      "properties": {
                          "expand": {
                              "description": "Expand options that include additional search result details in the response.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "issues": {
                              "description": "The list of issues found by the search.",
                              "items": {
                                  "$ref": "#/components/schemas/IssueBean"
                              },
                              "readOnly": true,
                              "type": "array"
                          },
                          "maxResults": {
                              "description": "The maximum number of results that could be on the page.",
                              "format": "int32",
                              "readOnly": true,
                              "type": "integer"
                          },
                          "names": {
                              "additionalProperties": {
                                  "readOnly": true,
                                  "type": "string"
                              },
                              "description": "The ID and name of each field in the search results.",
                              "readOnly": true,
                              "type": "object"
                          },
                          "schema": {
                              "additionalProperties": {
                                  "$ref": "#/components/schemas/JsonTypeBean"
                              },
                              "description": "The schema describing the field types in the search results.",
                              "readOnly": true,
                              "type": "object"
                          },
                          "startAt": {
                              "description": "The index of the first item returned on the page.",
                              "format": "int32",
                              "readOnly": true,
                              "type": "integer"
                          },
                          "total": {
                              "description": "The number of results on the page.",
                              "format": "int32",
                              "readOnly": true,
                              "type": "integer"
                          },
                          "warningMessages": {
                              "description": "Any warnings related to the JQL query.",
                              "items": {
                                  "readOnly": true,
                                  "type": "string"
                              },
                              "readOnly": true,
                              "type": "array"
                          }
                      },
                      "type": "object"
                  },
                  "SimpleLink": {
                      "description": "Details about the operations available in this version.",
                      "properties": {
                          "href": {
                              "type": "string"
                          },
                          "iconClass": {
                              "type": "string"
                          },
                          "id": {
                              "type": "string"
                          },
                          "label": {
                              "type": "string"
                          },
                          "styleClass": {
                              "type": "string"
                          },
                          "title": {
                              "type": "string"
                          },
                          "weight": {
                              "format": "int32",
                              "type": "integer"
                          }
                      },
                      "type": "object",
                      "xml": {
                          "name": "link"
                      }
                  },
                  "StatusCategory": {
                      "additionalProperties": true,
                      "description": "A status category.",
                      "properties": {
                          "colorName": {
                              "description": "The name of the color used to represent the status category.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "id": {
                              "description": "The ID of the status category.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                          },
                          "key": {
                              "description": "The key of the status category.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "name": {
                              "description": "The name of the status category.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "self": {
                              "description": "The URL of the status category.",
                              "readOnly": true,
                              "type": "string"
                          }
                      },
                      "type": "object"
                  },
                  "StatusDetails": {
                      "additionalProperties": true,
                      "description": "A status.",
                      "properties": {
                          "description": {
                              "description": "The description of the status.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "iconUrl": {
                              "description": "The URL of the icon used to represent the status.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "id": {
                              "description": "The ID of the status.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "name": {
                              "description": "The name of the status.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "self": {
                              "description": "The URL of the status.",
                              "readOnly": true,
                              "type": "string"
                          },
                          "statusCategory": {
                              "allOf": [
                                  {
                                      "$ref": "#/components/schemas/StatusCategory"
                                  }
                              ],
                              "description": "The category assigned to the status.",
                              "readOnly": true
                          }
                      },
                      "type": "object"
                  }
              }
          },
          "info": {
              "description": "Jira Cloud platform REST API documentation",
              "title": "The Jira Cloud platform REST API",
              "version": "1001.0.0-SNAPSHOT"
          },
          "openapi": "3.0.1",
          "paths": {
              "/rest/api/3/search": {
                  "get": {
                      "description": "Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).\n\nIf the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
                      "operationId": "searchForIssuesUsingJql",
                      "parameters": [
                          {
                              "description": "The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:\n\n *  If no JQL expression is provided, all issues are returned.\n *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.\n *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.",
                              "in": "query",
                              "name": "jql",
                              "schema": {
                                  "example": "project = HSP",
                                  "type": "string"
                              },
                              "x-showInExample": "true"
                          },
                          {
                              "description": "The index of the first item to return in a page of results (page offset).",
                              "in": "query",
                              "name": "startAt",
                              "schema": {
                                  "default": 0,
                                  "format": "int32",
                                  "type": "integer"
                              }
                          },
                          {
                              "description": "The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only.",
                              "in": "query",
                              "name": "maxResults",
                              "schema": {
                                  "default": 50,
                                  "format": "int32",
                                  "type": "integer"
                              }
                          },
                          {
                              "description": "Determines how to validate the JQL query and treat the validation results. Supported values are:\n\n *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).\n *  `warn` Returns all errors as warnings.\n *  `none` No validation is performed.\n *  `true` *Deprecated* A legacy synonym for `strict`.\n *  `false` *Deprecated* A legacy synonym for `warn`.\n\nNote: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.",
                              "in": "query",
                              "name": "validateQuery",
                              "schema": {
                                  "default": "strict",
                                  "enum": [
                                      "strict",
                                      "warn",
                                      "none",
                                      "true",
                                      "false"
                                  ],
                                  "type": "string"
                              }
                          },
                          {
                              "description": "A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all navigable (default) fields except description.\n *  `*all,-comment` Returns all fields except comments.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.\n\nNote: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.",
                              "in": "query",
                              "name": "fields",
                              "schema": {
                                  "items": {
                                      "default": "*navigable",
                                      "type": "string"
                                  },
                                  "type": "array"
                              }
                          },
                          {
                              "description": "Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `operations` Returns all possible operations for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.",
                              "in": "query",
                              "name": "expand",
                              "schema": {
                                  "type": "string"
                              }
                          },
                          {
                              "description": "A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified.",
                              "in": "query",
                              "name": "properties",
                              "schema": {
                                  "items": {
                                      "type": "string"
                                  },
                                  "type": "array"
                              }
                          },
                          {
                              "description": "Reference fields by their key (rather than ID).",
                              "in": "query",
                              "name": "fieldsByKeys",
                              "schema": {
                                  "default": false,
                                  "type": "boolean"
                              }
                          }
                      ],
                      "responses": {
                          "200": {
                              "content": {
                                  "application/json": {
                                      "schema": {
                                          "$ref": "#/components/schemas/SearchResults"
                                      }
                                  }
                              },
                              "description": "Returned if the request is successful."
                          },
                          "400": {
                              "description": "Returned if the JQL query is invalid."
                          },
                          "401": {
                              "description": "Returned if the authentication credentials are incorrect or missing."
                          }
                      },
                      "summary": "Search for issues using JQL (GET)"
                  }
              }
          }
      }
      
      Turn a user message into a JIRA API requests. For example:
      user: покажи мои открытые задачи
      assistant: /rest/api/3/search?jql=assignee%20%3D%20currentUser%28%29%20AND%20resolution%20%3D%20Unresolved%20ORDER%20BY%20updated%20DESC&fields=summary,priority,assignee,status,creator,subtasks,issuetype,project,description,comment,parent&maxResults=10

  - role: user
    content: покажи мои открытые задачи
  - role: assistant
    content: /rest/api/3/search?jql=assignee%20%3D%20currentUser%28%29%20AND%20resolution%20%3D%20Unresolved%20ORDER%20BY%20updated%20DESC&fields=summary,priority,assignee,status,creator,subtasks,issuetype,project,description,comment,parent&maxResults=10
  - role: user
    content: покажи мои задачи
  - role: assistant
    content: /rest/api/3/search?jql=assignee%20%3D%20currentUser%28%29%20AND%20resolution%20%3D%20Unresolved%20ORDER%20BY%20updated%20DESC&fields=summary,priority,assignee,status,creator,subtasks,issuetype,project,description,comment,parent&maxResults=10
  - role: user
    content: покажи все задачи, которые я создал
  - role: assistant
    content: /rest/api/3/search?jql=reporter%20%3D%20currentUser%28%29&fields=summary,priority,assignee,status,creator,subtasks,issuetype,project,description,comment,parent&maxResults=10
  - role: user
    content: покажи все недавно созданные задачи
  - role: assistant
    content: /rest/api/3/search?jql=created%20%3E%3D%20-1w%20order%20by%20created%20DESC&fields=summary,priority,assignee,status,creator,subtasks,issuetype,project,description,comment,parent&maxResults=999
  - role: user
    content: покажи мои эпики
  - role: assistant
    content: /rest/api/3/search?jql=issuetype%20%3D%20Epic%20AND%20resolution%20%3D%20Unresolved%20AND%20%28watcher%20%3D%20currentUser%28%29%20OR%20assignee%20%3D%20currentUser%28%29%29%20order%20by%20created%20DESC&fields=summary,priority,assignee,status,creator,subtasks,issuetype,project,description,comment,parent&maxResults=10
